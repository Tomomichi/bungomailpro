.mb-30
  .ui.breadcrumb
    = link_to 'Channels', channels_path, class: 'section'
    %i.icon.right.angle.divider
    .section= @channel.title

.mb-30
  %h1.ui.large.header.mb-0
    = @channel.title
    %small
      - if @channel.public
        %i.icon.small.green.check.circle

  .ui.divider.mb-0
  .ui.small.horizontal.list
    .item
      %i.icon.clock.outline
      = @channel.delivery_time.strftime("%H:%M")
    .item
      %i.icon.align.left
      = @channel.words_per_day
      words/day
    .item
      = link_to 'Edit', edit_channel_path(@channel)
  .ui.divider.mt-0

-# Now Playing
.mb-50
  .ui.fluid.secondary.pointing.menu
    .active.item
      %i.icon.play.circle
      Now Playing
  - if @current_assignment.blank?
    .ui.secondary.center.aligned.segment
      .mb-10
        = link_to 'Start Now!', start_channel_path(@channel), method: :post, class: "ui red responsive large button"
      - if @book_assignments.present?
        The first book of the stocked books will be delivered.
      - else
        The book will be selected automatically.
  - else
    .ui.fluid.card
      .secondary.content
        .header
          - icon_class = @channel.active? ? "play" : "pause"
          %i.icon.outline.red.circle{class: icon_class}
          = @current_assignment.book.title
          &nbsp;
          .ui.small.black.basic.label 1 of 30
        .meta
          = @current_assignment.book.author_name
      .ui.bottom.attached.basic.buttons
        - if @channel.active?
          = link_to channel_path(@channel, channel: { active: false }), method: :patch, class: 'ui button' do
            %i.icon.pause
            Pause
        - else
          = link_to channel_path(@channel, channel: { active: true }), method: :patch, class: 'ui button' do
            %i.icon.play
            Play
        = link_to book_assignment_path(@current_assignment), method: :delete,  data: { confirm: 'Delete the stocked book. You can not undo this after confirming.' }, class: 'ui button' do
          %i.icon.remove
          Delete


-# Stocked Books & Auto-Select Settings
.mb-50
  -# SP
  .ui.fluid.secondary.pointing.two.item.mobile.only.menu
    = link_to channel_path(@channel), class: "item #{'active' unless params['menu']}" do
      %i.icon.book
      Stocked Books
    = link_to  channel_path(@channel, menu: "search_condition"), class: "item #{'active' if params['menu']}" do
      %i.icon.search
      Auto-Select Setting
  -# PC
  .ui.fluid.secondary.pointing.tablet.computer.only.menu
    = link_to channel_path(@channel), class: "item #{'active' unless params['menu']}" do
      %i.icon.book
      Stocked Books
    = link_to  channel_path(@channel, menu: "search_condition"), class: "item #{'active' if params['menu']}" do
      %i.icon.search
      Auto-Select Setting


  -# Auto-Select Setting
  - if params["menu"]
    - if @condition.present?
      %table.ui.definition.divided.unstackable.fixed.table
        - @condition.query.each do |key, value|
          %tr
            %td.four.wide= key
            %td= value
      = link_to guten_books_path(q: @condition.query), class: 'ui responsive button' do
        %i.icon.search
        See search results
      &nbsp;
      = link_to search_conditions_path do
        Saved Searches

    - else
      .ui.placeholder.center.aligned.segment
        .ui.icon.header
          %i.icon.search
          .content
            No setting exists.
        .mb-10
          = link_to 'Set Search Settings', guten_books_path, class: 'ui large primary responsive button'
        %p If not, books will be selected with the defaults search settings.


  - else
    -# Stocked Books
    - if @book_assignments.blank?
      .ui.placeholder.center.aligned.segment
        .ui.icon.header
          %i.icon.inbox
          .content
            No book is stocked.

        .ui.large.buttons.computer.only
          = link_to add_books_channel_path(@channel), method: :post, class: 'ui primary button' do
            Auto Select Books
          .or
          - books_path = I18n.locale == :en ? guten_books_path : aozora_books_path
          = link_to 'Select by yourself', books_path, class: 'ui button'
        .mobile.tablet.only
          .mb-10
            = link_to add_books_channel_path(@channel), method: :post, class: 'ui primary button' do
              Auto Select Books
          %p
            Or
            - books_path = I18n.locale == :en ? guten_books_path : aozora_books_path
            = link_to 'Select by yourself', books_path

        .ui.basic.segment
          You can change the selected books later if you don't like them.
      %p
        = link_to 'See saved searches', search_conditions_path
        or
        - books_path = I18n.locale == :en ? guten_books_path : aozora_books_path
        = link_to 'Create new search', books_path

    - else
      %table.ui.fixed.unstackable.table
        = link_to channel_book_assignments_path(@channel) do
          Change Order
        - @book_assignments.each.with_index(1) do |assignment, index|
          %tr
            %td.one.wide.left.aligned.computer.only
              = index
            %td.two.wide.left.aligned.mobile.tablet.only
              = index

            %td.twelve.wide
              .ui.small.header.mb-0
                = assignment.book.title
              %small= assignment.book.author_name
              &nbsp;
              %span.ui.mini.label 1mth

            %td.two.wide.right.aligned.computer.only
              = link_to book_assignment_path(assignment), method: :delete,  data: { confirm: 'Delete the stocked book. You can not undo this after confirming.' }, class: 'ui transparent icon button' do
                %i.icon.remove
            %td.three.wide.right.aligned.mobile.tablet.only
              = link_to book_assignment_path(assignment), method: :delete,  data: { confirm: 'Delete the stocked book. You can not undo this after confirming.' }, class: 'ui transparent icon button' do
                %i.icon.remove
      .mb-30
      %p *New book will be added automatically when stock runs out.
